export interface Interaction {
    target: EventTarget;
    events: string[];
}
export declare abstract class Base {
    protected abstract listenerAction: () => void;
    protected abstract tick: () => void;
    protected timer: number;
    protected intervalId: number;
    protected interactions: Interaction[];
    protected timeout: number;
    protected factor: number;
    protected callback: () => void;
    /**
     * Sets time after which it's idle if no interaction occurs.
     *
     * @param factor amount of miliseconds `timeout` represents, default 60000 (a minute)
     */
    within(timeout: number, factor?: number): this;
    do(callback: () => void): this;
    start(): this;
    stop(): this;
    protected addListeners(): void;
    protected removeListeners(): void;
    protected clearInterval(): void;
    protected setInterval(): void;
    protected pushDefaultInteraction(): void;
    protected concatInteractions(interactions: Interaction[] | Interaction): void;
}
