var defaultDocumentEvents = [
    'click',
    'mousemove',
    'mouseenter',
    'keydown',
    'scroll',
    'touchstart',
];
var Base = /** @class */ (function () {
    function Base() {
        this.timer = 0;
        this.interactions = [];
    }
    /**
     * Sets time after which it's idle if no interaction occurs.
     *
     * @param factor amount of miliseconds `timeout` represents, default 60000 (a minute)
     */
    Base.prototype.within = function (timeout, factor) {
        if (factor === void 0) { factor = 60000; }
        this.timeout = timeout;
        this.factor = factor;
        return this;
    };
    Base.prototype.do = function (callback) {
        this.callback = callback;
        return this;
    };
    Base.prototype.start = function () {
        if (this.interactions.length === 0) {
            throw Error('There is no interaction to watch!');
        }
        this.addListeners();
        this.setInterval();
        return this;
    };
    Base.prototype.stop = function () {
        this.removeListeners();
        this.clearInterval();
        return this;
    };
    Base.prototype.addListeners = function () {
        for (var _i = 0, _a = this.interactions; _i < _a.length; _i++) {
            var interaction = _a[_i];
            for (var _b = 0, _c = interaction.events; _b < _c.length; _b++) {
                var event_1 = _c[_b];
                interaction.target.addEventListener(event_1, this.listenerAction);
            }
        }
    };
    Base.prototype.removeListeners = function () {
        for (var _i = 0, _a = this.interactions; _i < _a.length; _i++) {
            var interaction = _a[_i];
            for (var _b = 0, _c = interaction.events; _b < _c.length; _b++) {
                var event_2 = _c[_b];
                interaction.target.removeEventListener(event_2, this.listenerAction);
            }
        }
    };
    Base.prototype.clearInterval = function () {
        clearInterval(this.intervalId);
    };
    Base.prototype.setInterval = function () {
        this.intervalId = setInterval(this.tick, this.factor);
    };
    Base.prototype.pushDefaultInteraction = function () {
        this.interactions.push({
            events: defaultDocumentEvents,
            target: document,
        });
    };
    Base.prototype.concatInteractions = function (interactions) {
        this.interactions = this.interactions
            .concat(interactions);
    };
    return Base;
}());
export { Base };
//# sourceMappingURL=/home/travis/build/harunurhan/idlejs/src/base.js.map