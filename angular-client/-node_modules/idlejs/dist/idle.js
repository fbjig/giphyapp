var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Base } from './base';
var Idle = /** @class */ (function (_super) {
    __extends(Idle, _super);
    function Idle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.repetitive = false;
        _this.listenerAction = function () {
            _this.timer = 0;
            _this.clearInterval();
            _this.setInterval();
        };
        _this.tick = function () {
            _this.timer += 1;
            if (_this.timer === _this.timeout || (_this.repetitive && _this.timer % _this.timeout === 0)) {
                _this.callback();
            }
        };
        return _this;
    }
    /**
     * @param interactions set of interactions which will prevent being idle
     */
    Idle.prototype.whenNot = function (interactions) {
        this.concatInteractions(interactions);
        return this;
    };
    /**
     * Adds default interactions to decide if user is not interacting with page.
     */
    Idle.prototype.whenNotInteractive = function () {
        this.pushDefaultInteraction();
        return this;
    };
    /**
     * Repeat calling idle action for each timeout frame.
     *
     * - Does NOT repeat by default
     */
    Idle.prototype.repeat = function (repeat) {
        if (repeat === void 0) { repeat = true; }
        this.repetitive = repeat;
        return this;
    };
    /**
     * Restart away timer
     * incase of custom situations other than events on `EventTarget`
     */
    Idle.prototype.restart = function () {
        this.listenerAction();
        return this;
    };
    return Idle;
}(Base));
export { Idle };
//# sourceMappingURL=/home/travis/build/harunurhan/idlejs/src/idle.js.map